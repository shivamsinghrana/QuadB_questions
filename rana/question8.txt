use std::io;


#[derive(Debug)]
struct TreeNode {
    val: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

impl TreeNode {
    fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

fn build_tree() -> Option<Box<TreeNode>> {
    println!("Enter the value of the node (or -1 to represent null):");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    let trimmed = input.trim();
    let val: i32 = trimmed.parse().expect("Please enter a valid integer");

    if val == -1 {
        return None;
    }

    let mut node = TreeNode::new(val);
    println!("Enter left child of {}: ", val);
    node.left = build_tree();
    println!("Enter right child of {}: ", val);
    node.right = build_tree();

    Some(Box::new(node))
}

fn max_depth(root: Option<Box<TreeNode>>) -> i32 {
    match root {
        Some(node) => {
            let left_depth = max_depth(node.left);
            let right_depth = max_depth(node.right);
            1 + left_depth.max(right_depth)
        }
        None => 0,
    }
}

fn main() {
   
    println!("Enter the root node of the binary tree:");
    let root = build_tree();

    
    println!("Max Depth: {}", max_depth(root));
}
